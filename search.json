[{"path":"http://hutchdatascience.org/conrad/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 conrad authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://hutchdatascience.org/conrad/articles/api-key.html","id":"getting-an-api-key","dir":"Articles","previous_headings":"","what":"Getting an API key","title":"Configuring API Key","text":"Sign /Create Azure account Microsoft Azure Cognitive Services. Click + Create resource (“Azure services” click Hamburger button)  Search “Speech” Click Create -> Speech Create Resource group “Name”.  Choose Pricing tier (can choose free version Free F0) Click Review + create, review Terms, click Create. deployment successful, see :white_check_mark: deployment complete next page. Next steps, click Go resource Look left sidebar Resource Management, click Keys Endpoint  Copy either KEY 1 KEY 2 clipboard. one key necessary make API call. complete steps, successfully retrieved API keys access API. WARNING: Remember Location/Region, use make calls API. Specifying different region lead HTTP 403 Forbidden response.","code":""},{"path":"http://hutchdatascience.org/conrad/articles/api-key.html","id":"setting-your-api-key","dir":"Articles","previous_headings":"","what":"Setting your API key","title":"Configuring API Key","text":"can set API key number ways: Edit ~/.Renviron set MS_TTS_API_KEY = \"YOUR_API_KEY\" R, use options(ms_tts_key = \"YOUR_API_KEY\"). Set export MS_TTS_API_KEY=YOUR_API_KEY .bash_profile/.bashrc ’re using R terminal. Pass api_key = \"YOUR_API_KEY\" arguments functions ms_list_voices(api_key = \"YOUR_API_KEY\").","code":""},{"path":"http://hutchdatascience.org/conrad/articles/conrad.html","id":"get-a-list-of-voices","dir":"Articles","previous_headings":"","what":"Get a list of voices","title":"Introduction to conrad","text":"ms_list_voice() performs HTTP request tts.speech.microsoft.com/cognitiveservices/voices/list endpoint get full list voices specific region. attaches region prefix endpoint get list voices region. example, assuming Location/Region associated API key westus, using ms_list_voice() access https://westus.tts.speech.microsoft.com/cognitiveservices/voices/list endpoint, providing list voices exclusively westus region. WARNING: Specify Speech resource region corresponds API Key output data frame containing several columns, including Name, DisplayName, LocalName, ShortName, Gender, Locale, LocaleName, several columns don’t need worry . Among columns, Name, Locale, Gender columns used ms_synthesize(), primary function enabling text--speech (speech synthesis) using Microsoft’s Text Speech API.","code":"library(conrad) list_voice <- ms_list_voice(region = \"westus\") head(list_voice[c(1:7)], 3)"},{"path":"http://hutchdatascience.org/conrad/articles/conrad.html","id":"text-to-speech","dir":"Articles","previous_headings":"","what":"Text-to-Speech","title":"Introduction to conrad","text":"convert text--speech, use function ms_synthesize() providing following arguments: script : Character vector text converted speech region : Region API key gender : Sex speaker language : Language spoken voice : Full voice name (taken Name variable output ms_list_voice()) result raw vector binary data. Convert audio output: can create temporary file store audio output WAV file, write binary data temporary file, finally play audio WAV file browser using play_audio() function. Listen audio:","code":"res <- ms_synthesize(script = \"Hello world, this is a talking computer\", region = \"westus\",                       gender = \"Male\", language = \"en-US\",                       voice = \"Microsoft Server Speech Text to Speech Voice (en-US, JacobNeural)\") # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) # Play audio in browser play_audio(audio = output_path)"},{"path":"http://hutchdatascience.org/conrad/articles/conrad.html","id":"examples","dir":"Articles","previous_headings":"","what":"Examples","title":"Introduction to conrad","text":"illustration purposes, included several embedded audio files contain synthesized speech. contain different scripts voices. combination Canadian capital quickly organized petitioned privileges.  ever forget .  Death come terrible suddenness.  drowned sound brute agony death may made.","code":"res <- ms_synthesize(script = \"A combination of Canadian capital quickly organized and petitioned for the same privileges.\",                      region = \"westus\", gender = \"Female\", language = \"en-US\",                       voice = \"Microsoft Server Speech Text to Speech Voice (en-US, AshleyNeural)\") # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) res <- ms_synthesize(script = \"Will we ever forget it.\",                      region = \"westus\", gender = \"Male\", language = \"en-US\",                       voice = \"Microsoft Server Speech Text to Speech Voice (en-US, RogerNeural)\") # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) res <- ms_synthesize(script = \"Death had come with terrible suddenness.\",                      region = \"westus\", gender = \"Female\", language = \"en-US\",                       voice = \"Microsoft Server Speech Text to Speech Voice (en-US, MichelleNeural)\") # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) res <- ms_synthesize(script = \"It drowned all sound that brute agony and death may have made\",                      region = \"westus\", gender = \"Female\", language = \"en-US\",                       voice = \"Microsoft Server Speech Text to Speech Voice (en-US, ChristopherNeural)\") # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path)"},{"path":"http://hutchdatascience.org/conrad/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Howard Baek. Author, maintainer, copyright holder. John Muschelli. Author.","code":""},{"path":"http://hutchdatascience.org/conrad/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baek H, Muschelli J (2023). conrad: Client Microsoft's 'Cognitive Services Text Speech REST' API. https://github.com/fhdsl/conrad, http://hutchdatascience.org/conrad/.","code":"@Manual{,   title = {conrad: Client for the Microsoft's 'Cognitive Services Text to Speech REST' API},   author = {Howard Baek and John Muschelli},   year = {2023},   note = {https://github.com/fhdsl/conrad, http://hutchdatascience.org/conrad/}, }"},{"path":"http://hutchdatascience.org/conrad/index.html","id":"conrad","dir":"","previous_headings":"","what":"Client for the Microsofts Cognitive Services Text to Speech REST' API","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"❗conrad reboot mscstts. Instead httr, superseded recommended, use httr2 perform HTTP requests Microsoft Cognitive Services Text Speech REST API. conrad serves client Microsoft Cognitive Services Text Speech REST API. Text Speech REST API supports neural text speech voices, support specific languages dialects identified locale. available endpoint associated region. use text speech REST API, valid account must registered Microsoft Azure Cognitive Services must obtain API key. Without API key, package work.","code":""},{"path":"http://hutchdatascience.org/conrad/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"Install CRAN version: install development version GitHub:","code":"install.packages(\"conrad\") # install.packages(\"devtools\") devtools::install_github(\"fhdsl/conrad\")"},{"path":"http://hutchdatascience.org/conrad/index.html","id":"getting-an-api-key","dir":"","previous_headings":"","what":"Getting an API key","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"Sign /Create Azure account Microsoft Azure Cognitive Services. Click + Create resource (“Azure services” click Hamburger button) Search “Speech” Click Create -> Speech Create Resource group “Name”. Choose Pricing tier (can choose free version Free F0) Click Review + create, review Terms, click Create. deployment successful, see ✅ deployment complete next page. Next steps, click Go resource Look left sidebar Resource Management, click Keys Endpoint Copy either KEY 1 KEY 2 clipboard. one key necessary make API call. complete steps, successfully retrieved API keys access API. ⚠️ Remember Location/Region, use make calls API. Specifying different region lead HTTP 403 Forbidden response.","code":""},{"path":"http://hutchdatascience.org/conrad/index.html","id":"setting-your-api-key","dir":"","previous_headings":"","what":"Setting your API key","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"can set API key number ways: Edit ~/.Renviron set MS_TTS_API_KEY = \"YOUR_API_KEY\" R, use options(ms_tts_key = \"YOUR_API_KEY\"). Set export MS_TTS_API_KEY=YOUR_API_KEY .bash_profile/.bashrc ’re using R terminal. Pass api_key = \"YOUR_API_KEY\" arguments functions ms_list_voices(api_key = \"YOUR_API_KEY\").","code":""},{"path":"http://hutchdatascience.org/conrad/index.html","id":"get-a-list-of-voices","dir":"","previous_headings":"","what":"Get a list of voices","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"ms_list_voice() uses tts.speech.microsoft.com/cognitiveservices/voices/list endpoint get full list voices specific region. attaches region prefix endpoint get list voices region. example, get list voices westus region, uses https://westus.tts.speech.microsoft.com/cognitiveservices/voices/list endpoint. ⚠️ sure specify Speech resource region corresponds API Key.","code":"ms_list_voice(api_key = \"YOUR_API_KEY\", region = \"westus\")"},{"path":"http://hutchdatascience.org/conrad/index.html","id":"convert-text-to-speech","dir":"","previous_headings":"","what":"Convert text to speech","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"ms_synthesize() uses tts.speech.microsoft.com/cognitiveservices/v1 endpoint convert text speech. endpoint requires Speech Synthesis Markup Language (SSML) specify language, gender, full voice name. ⚠️ sure specify Speech resource region corresponds API Key.","code":"# Convert text to speech res <- ms_synthesize(script = \"Hello world, this is a talking computer\", region = \"westus\", gender = \"Male\") # Returns hexadecimal representation of binary data  # Create file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) # Play audio in browser play_audio(audio = output_path)"},{"path":"http://hutchdatascience.org/conrad/index.html","id":"get-an-access-token","dir":"","previous_headings":"","what":"Get an access token","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"ms_get_token() makes request issueToken endpoint get access token. function require API key region inputs. access token used send requests API. ⚠️ sure specify Speech resource region corresponds API Key.","code":"ms_get_token(api_key = \"YOUR_API_KEY\", region = \"westus\")"},{"path":"http://hutchdatascience.org/conrad/index.html","id":"major-differences-to-mscstts","dir":"","previous_headings":"","what":"Major differences to mscstts","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"enhance reliability package, transitioned using httr httr2 handling HTTP requests Text Speech REST API. change motivated fact httr longer actively maintained, updates limited necessary CRAN compatibility. contrast, httr2 represents modern reimagining httr strongly recommended usage. resolves HTTP 403 Forbidden issue. HTTP 403 Forbidden response status code signifies server comprehends request denies authorization. case mscstts::ms_synthesize(), problem arose due use invalid voice within HTTP request, specifically concerning chosen region. instance, SSML might contained voice name supported westus region. consequence, server reject HTTP request. made significant improvements documentation across entire package. enhancements include simpler function names, commented functions clarity, removal unnecessary functions arguments, URLs directing users pages explain text--speech jargon. believe improvements greatly enhance usability package make even reliable long-term.","code":""},{"path":"http://hutchdatascience.org/conrad/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Client for the Microsofts Cognitive Services Text to Speech REST' API","text":"conrad wouldn’t possible without prior work mscstts John Muschelli httr2 Hadley Wickham.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_choose_voice.html","id":null,"dir":"Reference","previous_headings":"","what":"Provide default voice when not provided — ms_choose_voice","title":"Provide default voice when not provided — ms_choose_voice","text":"'voice' argument supplied ms_synthesize(), obtain full list voices specified region default, use first voice list.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_choose_voice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provide default voice when not provided — ms_choose_voice","text":"","code":"ms_choose_voice(   api_key = NULL,   gender = c(\"Female\", \"Male\"),   language = \"en-US\",   region = \"westus\" )"},{"path":"http://hutchdatascience.org/conrad/reference/ms_choose_voice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provide default voice when not provided — ms_choose_voice","text":"api_key Microsoft Azure Cognitive Services API key gender Sex speaker language Language spoken region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_choose_voice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provide default voice when not provided — ms_choose_voice","text":"List gender, language, full voice name","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_choose_voice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provide default voice when not provided — ms_choose_voice","text":"","code":"if (FALSE) { # Default voice whose gender is Female, language is English, and region is 'westus' ms_choose_voice(gender = \"Female\", language = \"en-US\", region = \"westus\") }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_create_ssml.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","title":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","text":"Create Speech Synthesis Markup Language (SSML)","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_create_ssml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","text":"","code":"ms_create_ssml(   script,   voice = NULL,   gender = c(\"Female\", \"Male\"),   language = \"en-US\",   escape = FALSE )"},{"path":"http://hutchdatascience.org/conrad/reference/ms_create_ssml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","text":"script character vector lines spoken voice Full voice name, gender Sex Speaker language Language spoken escape non-standard characters substituted?  used script SSML tags","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_create_ssml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","text":"character string text SSML markup","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_create_ssml.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Speech Synthesis Markup Language (SSML) — ms_create_ssml","text":"","code":"ms_create_ssml(\"hey I really like things & dogs\", escape = TRUE) #> [1] \"<speak version='1.0' xml:lang='en-US'><voice xml:lang='en-US' xml:gender='Female' name=''>hey I really like things and dogs<\/voice><\/speak>\" ms_create_ssml(\"hey I really like things\") #> [1] \"<speak version='1.0' xml:lang='en-US'><voice xml:lang='en-US' xml:gender='Female' name=''>hey I really like things<\/voice><\/speak>\" ms_create_ssml('hey I <emphasis level=\"strong\">really like<\/emphasis> things') #> [1] \"<speak version='1.0' xml:lang='en-US'><voice xml:lang='en-US' xml:gender='Female' name=''>hey I <emphasis level=\\\"strong\\\">really like<\/emphasis> things<\/voice><\/speak>\" ms_create_ssml('hey I <emphasis level=\"strong\">really like<\/emphasis> things', escape = TRUE) #> [1] \"<speak version='1.0' xml:lang='en-US'><voice xml:lang='en-US' xml:gender='Female' name=''>hey I emphasis level=\\\"strong\\\"really likeemphasis things<\/voice><\/speak>\""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":null,"dir":"Reference","previous_headings":"","what":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"Determines option(ms_tts_key) set key stored environment variable (MS_TTS_API_KEY, MS_TTS_API_KEY1, MS_TTS_API_KEY2). found, stops returns error. found, returns value.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"","code":"ms_fetch_key(api_key = NULL, error = TRUE)  ms_exist_key(api_key = NULL)  ms_set_key(api_key)  ms_valid_key(api_key = NULL, region = \"westus\")"},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"api_key Microsoft Cognitive Services API key error function error api_key = NULL? region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"API key Logical vector, indicating whether user API key. Logical vector, indicating whether API key valid.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"ms_exist_key(): user API key? ms_set_key(): Set API Key global option ms_valid_key(): Check whether API key valid","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"can either set API key using option(ms_tts_key) accessible api_key = Sys.getenv('MS_TTS_API_KEY\")}, \\code{api_key = Sys.getenv('MS_TTS_API_KEY1\")}, \\code{api_key =   Sys.getenv('MS_TTS_API_KEY2\")","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_fetch_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find API Key for Microsoft Cognitive Services Text To Speech (TTS) — ms_fetch_key","text":"","code":"if (FALSE) { # interactive() res = ms_fetch_key(api_key = NULL, error = FALSE) } if (FALSE) { # interactive() # Don't provide api key but fetch it programmatically ms_exist_key(api_key = NULL)  # Provide api key XXX ms_exist_key(api_key = \"XXX\") } if (FALSE) { # interactive() # Set api key XXX ms_set_key(api_key = \"XXX\") } if (FALSE) { # interactive() # Check whether API key is valid in westus ms_valid_key(region = \"westus\") }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_get_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","title":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","text":"Get Microsoft Text Speech (TTS) Cognitive Services Token API Key Check token expired","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_get_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","text":"","code":"ms_get_token(api_key = NULL, region = \"westus\")  ms_token_expired(token = NULL)"},{"path":"http://hutchdatascience.org/conrad/reference/ms_get_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","text":"api_key Microsoft Azure Cognitive Services API key region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions token authentication class token, likely ms_get_token","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_get_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","text":"list request token Logical vector, indicating whether token expired","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_get_token.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Microsoft Text To Speech (TTS) or Cognitive Services Token from API Key — ms_get_token","text":"","code":"if (FALSE) { # ms_valid_key() # Get token where region is westus token = ms_get_token(region = \"westus\") } if (FALSE) { # interactive() # Check if token XXX has expired ms_token_expired(token = \"XXX\") }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":null,"dir":"Reference","previous_headings":"","what":"Get List of Voices for Specified Region — ms_list_voice","title":"Get List of Voices for Specified Region — ms_list_voice","text":"Obtains full list voices specific region.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get List of Voices for Specified Region — ms_list_voice","text":"","code":"ms_list_voice(api_key = NULL, region = \"westus\")"},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get List of Voices for Specified Region — ms_list_voice","text":"api_key Microsoft Azure Cognitive Services API key region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get List of Voices for Specified Region — ms_list_voice","text":"data.frame names long names.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get List of Voices for Specified Region — ms_list_voice","text":"info, see Get list voices Microsoft documentation.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_list_voice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get List of Voices for Specified Region — ms_list_voice","text":"","code":"if (FALSE) { # interactive() # List voices for westus ms_list_voice(region = \"westus\")  # List voices for eastus ms_list_voice(region = \"eastus\") }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_region.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if provided region is supported by Speech service — ms_region","title":"Check if provided region is supported by Speech service — ms_region","text":"region supported, function returns region. supported, throws warning message.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if provided region is supported by Speech service — ms_region","text":"","code":"ms_region(region = conrad::region)"},{"path":"http://hutchdatascience.org/conrad/reference/ms_region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if provided region is supported by Speech service — ms_region","text":"region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_region.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if provided region is supported by Speech service — ms_region","text":"Character vector region","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if provided region is supported by Speech service — ms_region","text":"","code":"if (FALSE) { # interactive() # Check if westus is supported ms_region(region = \"westus\") # Check if eastus is supported ms_region(region = \"eastus\") }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Text to Speech — ms_synthesize","title":"Convert Text to Speech — ms_synthesize","text":"Convert text speech using Speech Synthesis Markup Language (SSML)","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Text to Speech — ms_synthesize","text":"","code":"ms_synthesize(   script,   region = \"westus\",   api_key = NULL,   token = NULL,   gender = c(\"Female\", \"Male\"),   language = \"en-US\",   voice = NULL,   escape = FALSE )"},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Text to Speech — ms_synthesize","text":"script character vector text converted speech region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions api_key Microsoft Azure Cognitive Services API key token authentication token gender Sex speaker language Language spoken voice Full voice name escape non-standard characters substituted?","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Text to Speech — ms_synthesize","text":"HTTP response hexadecimal representation binary data","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Text to Speech — ms_synthesize","text":"info, see Section Convert text speech Microsoft documentation.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_synthesize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Text to Speech — ms_synthesize","text":"","code":"if (FALSE) { # ms_exist_key() # Convert text to speech res <- ms_synthesize(script = \"Hello world, this is a talking computer testing test\",                      region = \"westus\",                      gender = \"Female\") # Returns hexadecimal representation of binary data  # Create temporary file to store audio output output_path <- tempfile(fileext = \".wav\") # Write binary data to output path writeBin(res, con = output_path) # Play audio in browser # play_audio(audio = output_path)  # Delete temporary file file.remove(output_path) }"},{"path":"http://hutchdatascience.org/conrad/reference/ms_use_voice.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","title":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","text":"Verify whether given voice compatible specific region. , provide gender, full voice name, language associated given voice.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_use_voice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","text":"","code":"ms_use_voice(voice, api_key = NULL, region = \"westus\")"},{"path":"http://hutchdatascience.org/conrad/reference/ms_use_voice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","text":"voice Full voice name (\"Microsoft Server Speech Text Speech Voice (XX, YY)\") api_key Microsoft Azure Cognitive Services API key region Subscription region API key. info, see https://learn.microsoft.com/en-us/azure/cognitive-services/speech-service/regions","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_use_voice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","text":"List gender, language, full voice name","code":""},{"path":"http://hutchdatascience.org/conrad/reference/ms_use_voice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Gender, Full Voice Name, and Language associated with provided Voice — ms_use_voice","text":"","code":"if (FALSE) { # Retrieve gender, full name, and language ms_use_voice(voice = \"Microsoft Server Speech Text to Speech Voice (en-US, JacobNeural)\",               region = \"westus\") }"},{"path":"http://hutchdatascience.org/conrad/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://hutchdatascience.org/conrad/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":null,"dir":"Reference","previous_headings":"","what":"Play audio in a browser — play_audio","title":"Play audio in a browser — play_audio","text":"uses HTML5 audio tags play audio browser. Borrowed googleLanguageR::gl_talk_player().","code":""},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Play audio in a browser — play_audio","text":"","code":"play_audio(audio = \"output.wav\", html = \"player.html\")"},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Play audio in a browser — play_audio","text":"audio file location audio file.  Must supported HTML5 html html file location created host audio","code":""},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Play audio in a browser — play_audio","text":"return value, called side effects","code":""},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Play audio in a browser — play_audio","text":"info, see Mozilla documentation detailing <audio> HTML element.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/play_audio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Play audio in a browser — play_audio","text":"","code":"if (FALSE) { # Opens a browser with embedded audio play_audio(audio = \"output.wav\") }"},{"path":"http://hutchdatascience.org/conrad/reference/region.html","id":null,"dir":"Reference","previous_headings":"","what":"Speech Service supported Region Identifier — region","title":"Speech Service supported Region Identifier — region","text":"character vector contains region identifiers support text speech.","code":""},{"path":"http://hutchdatascience.org/conrad/reference/region.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Speech Service supported Region Identifier — region","text":"","code":"region"},{"path":[]},{"path":"http://hutchdatascience.org/conrad/reference/region.html","id":"region","dir":"Reference","previous_headings":"","what":"region","title":"Speech Service supported Region Identifier — region","text":"character vector","code":""},{"path":"http://hutchdatascience.org/conrad/reference/region.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Speech Service supported Region Identifier — region","text":"https://learn.microsoft.com/en-us/azure/cognitive-services/Speech-Service/regions","code":""},{"path":[]},{"path":"http://hutchdatascience.org/conrad/news/index.html","id":"conrad-100","dir":"Changelog","previous_headings":"","what":"conrad 1.0.0","title":"conrad 1.0.0","text":"CRAN release: 2023-07-03 Added NEWS.md file track changes package.","code":""}]
